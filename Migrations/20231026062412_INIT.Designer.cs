// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestionsAnswersApp.Data;

#nullable disable

namespace QuestionsAnswersApp.Migrations
{
    [DbContext(typeof(InterviewDBContext))]
    [Migration("20231026062412_INIT")]
    partial class INIT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuestionsAnswersApp.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownVotes")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UpVotes")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            AnswerText = "Answer 1 for Question 1",
                            DownVotes = 0,
                            QuestionId = 1,
                            UpVotes = 0,
                            User = "user3"
                        },
                        new
                        {
                            AnswerId = 2,
                            AnswerText = "Answer 2 for Question 1",
                            DownVotes = 0,
                            QuestionId = 1,
                            UpVotes = 0,
                            User = "user4"
                        },
                        new
                        {
                            AnswerId = 3,
                            AnswerText = "Answer 1 for Question 2",
                            DownVotes = 0,
                            QuestionId = 2,
                            UpVotes = 0,
                            User = "user3"
                        });
                });

            modelBuilder.Entity("QuestionsAnswersApp.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("DownVotes")
                        .HasColumnType("int");

                    b.Property<string>("QuestionTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpVotes")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            DownVotes = 0,
                            QuestionTags = "tag1,tag2",
                            QuestionText = "Question 1",
                            UpVotes = 0,
                            User = "user1"
                        },
                        new
                        {
                            QuestionId = 2,
                            DownVotes = 0,
                            QuestionTags = "tag2,tag3",
                            QuestionText = "Question 2",
                            UpVotes = 0,
                            User = "user1"
                        },
                        new
                        {
                            QuestionId = 3,
                            DownVotes = 0,
                            QuestionTags = "tag3,tag4",
                            QuestionText = "Question 3",
                            UpVotes = 0,
                            User = "user2"
                        });
                });

            modelBuilder.Entity("QuestionsAnswersApp.Models.Answer", b =>
                {
                    b.HasOne("QuestionsAnswersApp.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionsAnswersApp.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
